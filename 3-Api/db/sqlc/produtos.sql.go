// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: produtos.sql

package db

import (
	"context"
)

const createProdutos = `-- name: CreateProdutos :one
INSERT INTO produtos (
    nome,
    descricao,
    preco
) VALUES (
    $1, $2, $3
) RETURNING id, nome, descricao, preco, criado_em
`

type CreateProdutosParams struct {
	Nome      string `json:"nome"`
	Descricao string `json:"descricao"`
	Preco     int32  `json:"preco"`
}

func (q *Queries) CreateProdutos(ctx context.Context, arg CreateProdutosParams) (Produto, error) {
	row := q.db.QueryRowContext(ctx, createProdutos, arg.Nome, arg.Descricao, arg.Preco)
	var i Produto
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Descricao,
		&i.Preco,
		&i.CriadoEm,
	)
	return i, err
}

const deleteProduto = `-- name: DeleteProduto :exec
DELETE FROM produtos WHERE id = $1
`

func (q *Queries) DeleteProduto(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProduto, id)
	return err
}

const getProduto = `-- name: GetProduto :one
SELECT id, nome, descricao, preco, criado_em FROM produtos
WHERE id = $1
`

func (q *Queries) GetProduto(ctx context.Context, id int32) (Produto, error) {
	row := q.db.QueryRowContext(ctx, getProduto, id)
	var i Produto
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Descricao,
		&i.Preco,
		&i.CriadoEm,
	)
	return i, err
}

const listProdutos = `-- name: ListProdutos :many
SELECT id, nome, descricao, preco, criado_em FROM produtos
ORDER BY id
`

func (q *Queries) ListProdutos(ctx context.Context) ([]Produto, error) {
	rows, err := q.db.QueryContext(ctx, listProdutos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Produto{}
	for rows.Next() {
		var i Produto
		if err := rows.Scan(
			&i.ID,
			&i.Nome,
			&i.Descricao,
			&i.Preco,
			&i.CriadoEm,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduto = `-- name: UpdateProduto :exec
UPDATE produtos SET nome = $2,
descricao = $3,
preco = $4
WHERE id = $1
`

type UpdateProdutoParams struct {
	ID        int32  `json:"id"`
	Nome      string `json:"nome"`
	Descricao string `json:"descricao"`
	Preco     int32  `json:"preco"`
}

func (q *Queries) UpdateProduto(ctx context.Context, arg UpdateProdutoParams) error {
	_, err := q.db.ExecContext(ctx, updateProduto,
		arg.ID,
		arg.Nome,
		arg.Descricao,
		arg.Preco,
	)
	return err
}
